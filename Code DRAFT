import tkinter as tk
from tkinter import ttk, messagebox
import heapq

class SocialMediaPost:
    def __init__(self, datetime, post, author):
        self.datetime = datetime
        self.post = post
        self.author = author

class ViewPost(SocialMediaPost):
    def __init__(self, datetime, post, author, views):
        super().__init__(datetime, post, author)
        self.views = views
    
    def __lt__(self, other):
        # Reverse comparison for max-heap simulation
        return self.views > other.views

class TreeNode:
    def __init__(self, post):
        self.post = post
        self.left = None
        self.right = None

class SocialMediaManager:
    def __init__(self):
        self.posts_by_datetime = {}
        self.root = None
        self.heap = []
    
    def add_post(self, post):
        self.posts_by_datetime[post.datetime] = post
        self._insert_bst(post)
        heapq.heappush(self.heap, post)
    
    def get_post_by_datetime(self, datetime):
        return self.posts_by_datetime.get(datetime, None)
    
    def _insert_bst(self, post):
        if not self.root:
            self.root = TreeNode(post)
        else:
            self._bst_insert(self.root, post)
    
    def _bst_insert(self, node, post):
        if post.datetime < node.post.datetime:
            if node.left is None:
                node.left = TreeNode(post)
            else:
                self._bst_insert(node.left, post)
        else:
            if node.right is None:
                node.right = TreeNode(post)
            else:
                self._bst_insert(node.right, post)
    
    def find_range(self, start, end):
        result = []
        self._find_range(self.root, start, end, result)
        return result
    
    def _find_range(self, node, start, end, result):
        if node is not None:
            if start <= node.post.datetime <= end:
                result.append(node.post)
            if start < node.post.datetime:
                self._find_range(node.left, start, end, result)
            if end > node.post.datetime:
                self._find_range(node.right, start, end, result)
    
    def get_top_post(self):
        return heapq.heappop(self.heap) if self.heap else None

# Setting up the GUI
class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Social Media Manager")
        self.geometry("400x300")
        self.resizable(False, False)

        self.manager = SocialMediaManager()

        # Creating widgets
        self.create_widgets()
    
    def create_widgets(self):
        # Labels and Entries for input
        ttk.Label(self, text="Datetime:").grid(column=0, row=0)
        self.datetime_entry = ttk.Entry(self)
        self.datetime_entry.grid(column=1, row=0)

        ttk.Label(self, text="Post:").grid(column=0, row=1)
        self.post_entry = ttk.Entry(self)
        self.post_entry.grid(column=1, row=1)

        ttk.Label(self, text="Author:").grid(column=0, row=2)
        self.author_entry = ttk.Entry(self)
        self.author_entry.grid(column=1, row=2)

        ttk.Label(self, text="Views:").grid(column=0, row=3)
        self.views_entry = ttk.Entry(self)
        self.views_entry.grid(column=1, row=3)

        # Buttons
        ttk.Button(self, text="Add Post", command=self.add_post).grid(column=0, row=4)
        ttk.Button(self, text="Search by Datetime", command=self.search_post).grid(column=1, row=4)
        ttk.Button(self, text="Show Top Post", command=self.show_top_post).grid(column=0, row=5)
    
    def add_post(self):
        datetime = self.datetime_entry.get()
        post = self.post_entry.get()
        author = self.author_entry.get()
        views = int(self.views_entry.get())
        new_post = ViewPost(datetime, post, author, views)
        self.manager.add_post(new_post)
        messagebox.showinfo("Success", "Post added successfully")
    
    def search_post(self):
        datetime = self.datetime_entry.get()
        post = self.manager.get_post_by_datetime(datetime)
        if post:
            messagebox.showinfo("Post Found", f"Datetime: {post.datetime}\nPost: {post.post}\nAuthor: {post.author}")
        else:
            messagebox.showinfo("Post Not Found", "No post with the given datetime found.")
    
    def show_top_post(self):
        post = self.manager.get_top_post()
        if post:
            messagebox.showinfo("Top Post", f"Post: {post.post}\nAuthor: {post.author}\nViews: {post.views}")
        else:
            messagebox.showinfo("No Post", "No posts available.")

app = Application()
app.mainloop()
